前端使用的第三方插件
	1、
	2、jQuery BlockUI
		作用：在不锁定浏览器的同时，模拟同步模式下发起Ajax请求的行为。该插件激活时，会阻止用户在页面进行的操作，直到插件被关闭
		demo链接：http://bookshadow.com/weblog/2014/09/26/jquery-blockui-js-introduction/
	3、Bootstrap Table
		作用：表格插件
		英文官网：https://bootstrap-table.com/docs/api/table-options/
		中文翻译：https://blog.csdn.net/S_clifftop/article/details/77937356
	4、Bootstrap-Treetable
		作用：树形表格控件
		码云仓库：https://gitee.com/cyf783/bootstrap-treetable
	5、cropbox
		作用：图像剪裁
		demo链接：https://www.cnblogs.com/baiyygynui/p/6921945.html
	6、bootstrap-datetimepicker.js
		作用：日期、时间选择器
	7、jquery.fullscreen.js
		作用：页面全屏效果
	8、iCheck
		作用：定制复选框和单选按钮
	9、jquery-layout
		作用：基于jQuery的布局框架
		demo链接：https://blog.csdn.net/zsg88/article/details/65445698
	10、jquery-ztree
	11、jsonview
		作用：json数据格式化
	12、layer
		作用：弹层展示
		官网链接：http://layer.layui.com/api.html
	13、layui
	14、select2
		作用：下拉选择控件
		中文api参数文档：https://www.cnblogs.com/wangchuanqi/p/5981212.html
	15、summernote
		作用：富文本编辑器
	16、jquery.validate
		作用：表单参数有效性校验
		
打包生成war包与jar包的配置
	打包生成jar的pom配置
		<packaging>jar</packaging>
		<build>
			<plugins>

				<!--打包jar-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<!--不打包资源文件
						<excludes>
							<exclude>*.**</exclude>
							<exclude>*/*.xml</exclude>
						</excludes>
						-->
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<!--MANIFEST.MF 中 Class-Path 加入前缀-->
								<classpathPrefix>lib/</classpathPrefix>
								<!--jar包不包含唯一版本标识-->
								<useUniqueVersions>false</useUniqueVersions>
								<!--指定入口类-->
								<mainClass>com.linzx.MainApplication</mainClass>
							</manifest>
							<manifestEntries>
								<!--MANIFEST.MF 中 Class-Path 加入资源文件目录-->
								<Class-Path>./resources/</Class-Path>
							</manifestEntries>
						</archive>
						<outputDirectory>${project.build.directory}</outputDirectory>
					</configuration>
				</plugin>

				<!--拷贝依赖jar-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<executions>
						<execution>
							<id>copy-dependencies</id>
							<phase>package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>
									${project.build.directory}/lib/
								</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!--拷贝资源文件-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>package</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
									</resource>
								</resources>
								<outputDirectory>${project.build.directory}/resources</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!--spring boot repackage，依赖 maven-jar-plugin 打包的jar包 重新打包成 cache boot 的jar包-->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<configuration>
						<!-- 如果没有该配置，devtools不会生效 -->
						<fork>true</fork>
						<!--重写包含依赖，包含不存在的依赖，jar里没有pom里的依赖-->
						<includes>
							<include>
								<groupId>null</groupId>
								<artifactId>null</artifactId>
							</include>
						</includes>
						<layout>ZIP</layout>
						<!--使用外部配置文件，jar包里没有资源文件-->
						<addResources>true</addResources>
						<outputDirectory>${project.build.directory}</outputDirectory>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
							<configuration>
								<!--配置jar包特殊标识 配置后，保留原文件，生成新文件 *-run.jar -->
								<!--配置jar包特殊标识 不配置，原文件命名为 *.jar.original，生成新文件 *.jar -->
								<!--<classifier>run</classifier>-->
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
	打包生成war的pom配置
		<packaging>war</packaging>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-tomcat</artifactId>
				<scope>provided</scope>
			</dependency>
		</dependencies>
		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>